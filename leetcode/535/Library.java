/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test2;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Library {
	public static final String FAKE_URL = "tinyurl.com/"; 
	public static Map<String, String> urlName = new HashMap<String, String>();  
    // Encodes a URL to a shortened URL.
    public static String encode(String longUrl) {
        StringBuffer protocolName = new StringBuffer();
        StringBuffer localName = new StringBuffer();
        StringBuffer resourcesName = new StringBuffer();
        StringBuffer stmp = new StringBuffer();
        char[] cht = longUrl.toCharArray();
        int i = 0;
        for(i = 0;i < longUrl.length();i++) {
        	if(cht[i] == '/') {
        		stmp.append(cht[i]);
        		if(stmp.toString().equals("//")) {
        			protocolName.append(longUrl,0,i+1);
        			i++;
        			break;
        		}
        	}
        }
        for(int j = i;i < longUrl.length();i++) {
        	if(cht[i] == '/') {
        		localName.append(longUrl,j,i);
        		resourcesName.append(longUrl,i + 1,longUrl.length());
        		break;
        	}
        }
        urlName.put(FAKE_URL, localName.toString());
        String encodeUrl = encodeURLFunc(resourcesName.toString());
        //System.out.println(new String(protocolName.toString()+tinyUrl+encodeUrl));
        return new String(protocolName.toString()+FAKE_URL+encodeUrl) ;        
    }

   // Decodes a shortened URL to its original URL.
    public static String decode(String shortUrl) {
        StringBuffer protocolName = new StringBuffer();
        StringBuffer localName = new StringBuffer();
        StringBuffer resourcesName = new StringBuffer();
    	StringBuffer stmp = new StringBuffer();
    	
    	char[] cht = shortUrl.toCharArray();
    	int i;
    	for(i = 0;i < shortUrl.length();i++) {
          	if(cht[i] == '/') {
          		stmp.append(cht[i]);
          		if(stmp.toString().equals("//")) {
          			protocolName.append(shortUrl,0,i+1);
          			i++;
          			break;
          		}
          	}
          }
          for(int j = i;i < shortUrl.length();i++) {
          	if(cht[i] == '/') {
          		localName.append(shortUrl,j,i);
          		resourcesName.append(shortUrl,i + 1,shortUrl.length());
          		break;
          	}
          }
          
        String decodeUrl = decodeURLFunc(resourcesName.toString());
        String realLocalName = urlName.get(FAKE_URL) + "/";
        return new String(protocolName.toString()+realLocalName+decodeUrl);
    }
    
    public static String encodeURLFunc(String resourcesName) {
    	char chtp[] = resourcesName.toCharArray();
    	for(int i = 0;i < resourcesName.length();i++) {
    		chtp[i] += 2;
    	}
    	return new String(chtp);
    }
    
    public static String decodeURLFunc(String resourcesName) {
    	char chtp[] = resourcesName.toCharArray();
    	for(int i = 0;i < resourcesName.length();i++) {
    		chtp[i] -= 2;
    	}
    	return new String(chtp);
    }
 // Your Codec object will be instantiated and called as such:
 // Codec codec = new Codec();
 // codec.decode(codec.encode(url));
    
    
	
    public static void main(String[] args) {
    	String url = new String("https://leetcode.com/problems/design-tinyurl");
    	String shortUrl = encode(url);
    	System.out.println(shortUrl);
    	System.out.println(decode(shortUrl));
   }
}
